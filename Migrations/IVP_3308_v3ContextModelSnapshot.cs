// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRMWebApiApp.Data;

#nullable disable

namespace SRMWebApiApp.Migrations
{
    [DbContext(typeof(IVP_3308_v3Context))]
    partial class IVP_3308_v3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SRMWebApiApp.Models.ActiveFlag", b =>
                {
                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.ToTable("ActiveFlags");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.BondRisk", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<double?>("AverageVolume30Day")
                        .HasColumnType("float");

                    b.Property<double?>("Convexity")
                        .HasColumnType("float");

                    b.Property<double?>("MacaulayDuration")
                        .HasColumnType("float");

                    b.Property<double?>("Spread")
                        .HasColumnType("float");

                    b.Property<double?>("Volatility30Day")
                        .HasColumnType("float");

                    b.Property<double?>("Volatility90Day")
                        .HasColumnType("float");

                    b.HasKey("SID")
                        .HasName("PK__BondRisk__CA195970B44F9D05");

                    b.ToTable("BondRisk");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.CallSchedule", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<DateOnly?>("CallDate")
                        .HasColumnType("date");

                    b.Property<double?>("CallPrice")
                        .HasColumnType("float");

                    b.HasKey("SID")
                        .HasName("PK__CallSche__CA1959707AB96237");

                    b.ToTable("CallSchedule");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.DividendHistory", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("DeclaredDate")
                        .HasColumnType("date");

                    b.Property<string>("DividendType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("ExDate")
                        .HasColumnType("date");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("PayDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RecordDate")
                        .HasColumnType("date");

                    b.HasKey("SID")
                        .HasName("PK__Dividend__CA1959706EB74C10");

                    b.ToTable("DividendHistory");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.EquityRisk", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<double?>("AverageVolume20Day")
                        .HasColumnType("float");

                    b.Property<double?>("Beta")
                        .HasColumnType("float");

                    b.Property<double?>("PriceVolatility90Day")
                        .HasColumnType("float");

                    b.Property<double?>("ShortInterest")
                        .HasColumnType("float");

                    b.Property<double?>("YTDReturn")
                        .HasColumnType("float");

                    b.HasKey("SID")
                        .HasName("PK__EquityRi__CA195970673DECF0");

                    b.ToTable("EquityRisk");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.PricingDetail", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<decimal?>("AskPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<double?>("BidPrice")
                        .HasColumnType("float");

                    b.Property<double?>("ClosePrice")
                        .HasColumnType("float");

                    b.Property<double?>("HighPrice")
                        .HasColumnType("float");

                    b.Property<double?>("LastPrice")
                        .HasColumnType("float");

                    b.Property<double?>("LowPrice")
                        .HasColumnType("float");

                    b.Property<double?>("OpenPrice")
                        .HasColumnType("float");

                    b.Property<double?>("PERatio")
                        .HasColumnType("float");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("SID")
                        .HasName("PK__PricingD__CA19597015ECF495");

                    b.ToTable("PricingDetails");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.PutSchedule", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<DateOnly?>("PutDate")
                        .HasColumnType("date");

                    b.Property<double?>("PutPrice")
                        .HasColumnType("float");

                    b.HasKey("SID")
                        .HasName("PK__PutSched__CA1959700698C3CC");

                    b.ToTable("PutSchedule");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.ReferenceDatum", b =>
                {
                    b.Property<string>("BloombergIndustryGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BloombergIndustrySubGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BloombergSector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryOfIncorporation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Exchange")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IssueCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IssueCurrency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Issuer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RiskCurrency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("SID")
                        .HasColumnType("int");

                    b.Property<string>("TradingCurrency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasIndex("SID");

                    b.ToTable("ReferenceData");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.RegulatoryDetail", b =>
                {
                    b.Property<int>("PFId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PFId"));

                    b.Property<string>("PFAssetClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PFCountry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PFCreditRating")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PFCurrency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PFInstrument")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PFLiquidityProfile")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PFMaturity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PFNAICSCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PFRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PFSector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PFSubAssetClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PFId")
                        .HasName("PK__Regulato__5944FB171D4EB8EE");

                    b.ToTable("RegulatoryDetails");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecurityDetailsBond", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<double?>("CouponCap")
                        .HasColumnType("float");

                    b.Property<double?>("CouponFloor")
                        .HasColumnType("float");

                    b.Property<int?>("CouponFrequency")
                        .HasColumnType("int");

                    b.Property<double?>("CouponRate")
                        .HasColumnType("float");

                    b.Property<string>("CouponType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("FirstCouponDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsCallable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFixToFloat")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPutable")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("LastResetDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("MaturityDate")
                        .HasColumnType("date");

                    b.Property<int?>("MaximumCallNotificationDays")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumPutNotificationDays")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("PenultimateCouponDate")
                        .HasColumnType("date");

                    b.Property<int?>("ResetFrequency")
                        .HasColumnType("int");

                    b.HasKey("SID")
                        .HasName("PK__Security__CA1959704061764D");

                    b.ToTable("SecurityDetailsBonds");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecurityDetailsEquity", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<string>("ADRUnderlyingCurrency")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("ADRUnderlyingTicker")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("IPODate")
                        .HasColumnType("date");

                    b.Property<string>("PriceCurrency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("SettleDays")
                        .HasColumnType("int");

                    b.Property<double?>("SharesOutstanding")
                        .HasColumnType("float");

                    b.Property<double?>("SharesPerADR")
                        .HasColumnType("float");

                    b.Property<double?>("VotingRightsPerShare")
                        .HasColumnType("float");

                    b.Property<bool?>("isADR")
                        .HasColumnType("bit");

                    b.HasKey("SID")
                        .HasName("PK__Security__CA1959702C48CD26");

                    b.ToTable("SecurityDetailsEquity");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecurityIdentifier", b =>
                {
                    b.Property<int>("SIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SIdentifier"));

                    b.Property<string>("BloombergGlobalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .HasDefaultValue("NA")
                        .IsFixedLength();

                    b.Property<string>("BloombergTicker")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BloombergTickerAndExchange")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BloombergUniqueId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BloombergUniqueName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("NA");

                    b.Property<string>("CUSIP")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("ISIN")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .IsFixedLength();

                    b.Property<string>("SEDOL")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("char(7)")
                        .IsFixedLength();

                    b.HasKey("SIdentifier")
                        .HasName("PK__Security__1E4E6088653FBF10");

                    b.ToTable("SecurityIdentifier");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecuritySummary", b =>
                {
                    b.Property<int>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SID"));

                    b.Property<bool?>("HasPosition")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecurityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("SID")
                        .HasName("PK__Security__CA19597060D594BF");

                    b.ToTable("SecuritySummary");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecuritySummaryBond", b =>
                {
                    b.Property<string>("AssetType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InvestmentType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<double?>("PricingFactor")
                        .HasColumnType("float");

                    b.Property<int?>("SecId")
                        .HasColumnType("int");

                    b.Property<double?>("TradingFactor")
                        .HasColumnType("float");

                    b.HasIndex("SecId");

                    b.ToTable("SecuritySummaryBonds");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecuritySummaryEquity", b =>
                {
                    b.Property<int?>("RoundLotSize")
                        .HasColumnType("int");

                    b.Property<int?>("SecId")
                        .HasColumnType("int");

                    b.HasIndex("SecId");

                    b.ToTable("SecuritySummaryEquity");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.ReferenceDatum", b =>
                {
                    b.HasOne("SRMWebApiApp.Models.SecuritySummary", "SIDNavigation")
                        .WithMany()
                        .HasForeignKey("SID")
                        .HasConstraintName("FK_SID_ReferenceData");

                    b.Navigation("SIDNavigation");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecuritySummaryBond", b =>
                {
                    b.HasOne("SRMWebApiApp.Models.SecuritySummary", "Sec")
                        .WithMany()
                        .HasForeignKey("SecId")
                        .HasConstraintName("FK_SecId_SecuritySummaryBonds");

                    b.Navigation("Sec");
                });

            modelBuilder.Entity("SRMWebApiApp.Models.SecuritySummaryEquity", b =>
                {
                    b.HasOne("SRMWebApiApp.Models.SecuritySummary", "Sec")
                        .WithMany()
                        .HasForeignKey("SecId")
                        .HasConstraintName("FK_SecId_SecuritySummaryEquity");

                    b.Navigation("Sec");
                });
#pragma warning restore 612, 618
        }
    }
}
